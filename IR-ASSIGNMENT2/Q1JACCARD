from nltk.tokenize import word_tokenize
import os

def calculator(intersection,union):
    return intersection/union

def tokenization(inp):
    return set(word_tokenize(inp.lower()))


    
def calculator_jac(input_by_user, file_path):
    token_generated = tokenization(input_by_user)
    f = open(file_path, 'r')
    file_contents = f.read().lower()
    tokens_of_files = set(word_tokenize(file_contents))
    f.close()
    union = len(token_generated.union(tokens_of_files))
    intersection = len(token_generated.intersection(tokens_of_files))
    final_jaccard_coef = calculator(intersection,union)
    return final_jaccard_coef

path_of_files = r"C:\Users\91911\Desktop\IR-ASSIGNMENT2\CSE508_Winter2023_Dataset\CSE508_Winter2023_Dataset"

query = input("Write your query please: ")
jaccard_dictionary = {}
for file_name in os.listdir(path_of_files):
    if not file_name.endswith(''):
        continue
    file_path = os.path.join(path_of_files, file_name)
    jaccard_coef = calculator_jac(query, file_path)
    jaccard_dictionary[file_name] = jaccard_coef


sorted_jaccard = {}
for k in sorted(jaccard_dictionary, key=jaccard_dictionary.get, reverse=True):
    sorted_jaccard[k] = jaccard_dictionary[k]

count = 0

for i, (file_name, jaccard_coef) in enumerate(sorted_jaccard.items()):
    if i == 10:
        break
    print(f'{file_name}: {jaccard_coef}')
